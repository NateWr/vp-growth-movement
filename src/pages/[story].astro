---
import { marked } from 'marked'
import { getCollection } from "astro:content"
import Layout from '../layouts/Layout.astro'
import AppStory from '../components/AppStory.vue'
import { getFilteredEvents } from '../utilities/getFilteredEvents.ts'
import { columns, data, rows, ticks } from '../data/chart-config.json'
import { StoryEventPositionOrigin } from '../types/StoryEventPositionOrigin.ts'
import events from '../data/events.json'
import { astroGetAdjacentStories } from '../utilities/astro-utilities'
import UnderlinedText from '../components/UnderlinedText.astro'

export async function getStaticPaths() {
  const stories = await getCollection('stories')
  return stories.map(story => ({
    params: { story: story.id },
    props: { story },
  }))
}

const { story } = Astro.props

const { nextStory, lastStory } = await astroGetAdjacentStories(story.id)
const homeTitle = 'All Stories'

marked.use({
  async: false,
})

const getStoryEvents = () =>  {
  return story.data.events
    .map((storyEvent) => {
      const event = events.find(e => e.id === storyEvent.id)
      if (!event) {
        throw new Error(`Could not find event ${storyEvent.id} in story ${story.id}`)
      }
      const xPercent = event.x / columns
      let position
      if (xPercent < 0.20) {
        position = {
          origin: StoryEventPositionOrigin.left,
          offset: xPercent,
        }
      } else if (xPercent < 0.80) {
        position = {
          origin: StoryEventPositionOrigin.center,
          offset: xPercent,
        }
      } else {
        position = {
          origin: StoryEventPositionOrigin.right,
          offset: 1 - xPercent,
        }
      }
      const date = (new Date(event.date)).toLocaleDateString(
        'en-US',
        {
          year: 'numeric',
          month: 'short',
          day: 'numeric',
        }
      )
      if (storyEvent?.headline) {
        storyEvent.headline = marked.parse(storyEvent.headline)
      }
      if (storyEvent?.summary) {
        storyEvent.summary = marked.parse(storyEvent.summary)
      }
      return {
        date,
        headline: marked.parse(event.headline),
        summary: marked.parse(event.summary),
        x: event.x,
        y: event.y,
        position,
        ...storyEvent,
      }
    })
}
const storyEvents = getStoryEvents()

const chartEventCoordsHighlighted = story.data?.filters
  ? getFilteredEvents(events, story.data?.filters ?? {})
    .map(({x, y}) => ({x, y}))
  : []

const chartEventCoords = data.filter(coords => {
  const isHighlighted = chartEventCoordsHighlighted
    .find(c => c.x == coords.x && c.y === coords.y)
  return !isHighlighted
})

const intro = marked.parse(story.data.intro)
const conclusion = marked.parse(story.data.conclusion)
---

<Layout
	title={[story.data.prefix, story.data.title].join(' ')}
	description={story.data.description}
	currentUrl="/"
	bgColor="black"
>
	<div class="
      story-root
      flex
      flex-col
      bg-black
      text-white
    "
  >
    <h1
      class="
        bg-blue
        text-white
        overflow-hidden
        md:grid
        md:grid-cols-12
        md:items-center
        md:gap-8
      "
      style="clip-path: url(#hero-bottom-cutout)"
    >
      <div class="
        hidden
        md:flex
        md:justify-end
        md:items-end
        md:col-span-4
        md:self-end
        md:pt-4
      ">
        <img
          src="/story-illustration.png"
          class="h-24 w-auto 2xl:h-32 3xl:h-38 4xl:h-64"
        />
      </div>
      <div
        class="
          p-4
          flex
          flex-col
          items-start
          md:col-span-8
          3xl:py-8
        "
      >
        <span
          class="
            sr-only
            text-sm
            font-medium
            uppercase
            leading-tight
            md:not-sr-only
            2xl:text-lg
            3xl:text-xl
            4xl:text-3xl
          "
        >
          {story.data.prefix}
        </span>
        <UnderlinedText hoverEffect={false} lineClass="-translate-y-full text-yellow h-0.5 md:h-1 2xl:h-1.5">
          <span
            class="
              text-2xl
              leading-tight
              font-extrabold
              uppercase
              md:text-3xl
              xl:text-4xl
              2xl:text-5xl
              3xl:text-6xl
              4xl:text-8xl
            "
          >
            {story.data.title}
          </span>
        </UnderlinedText>
      </div>
    </h1>
    <AppStory
      client:only="vue"
      chartColumns={columns}
      chartEventCoords={chartEventCoords}
      chartEventCoordsHighlighted={chartEventCoordsHighlighted}
      chartRows={rows}
      ticks={ticks}
      intro={intro}
      conclusion={conclusion}
      events={storyEvents}
      actions={story.data.actions}
      nextStoryUrl={`/${nextStory?.id ?? ''}`}
      nextStoryTitle={nextStory?.data?.title_short ?? homeTitle}
      lastStoryUrl={`/${lastStory?.id ?? '#stories'}`}
      lastStoryTitle={lastStory?.data?.title_short ?? homeTitle}
    />
	</div>
</Layout>

<style>
.story-root {
  height: calc(100vh - var(--header-height));
  height: calc(100svh - var(--header-height));
}
</style>