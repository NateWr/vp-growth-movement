---
import { marked } from 'marked'
import { getCollection } from "astro:content"
import Layout from '../layouts/Layout.astro'
import StoryBlock from '../components/StoryBlock.vue'
import { getFilteredEvents } from '../utilities/getFilteredEvents.ts'
import { columns, data, rows, ticks } from '../data/chart-config.json'
import type { StoryEvent } from '../types/StoryEvent'
import { StoryEventPositionOrigin } from '../types/StoryEventPosition.d.ts'
import events from '../data/events.json'

export async function getStaticPaths() {
  const stories = await getCollection('stories')
  return stories.map(story => ({
    params: { story: story.id },
    props: { story },
  }))
}

const { story } = Astro.props

const formatDate = (str: string) => {
  return (new Date(str))
    .toLocaleDateString(
      'en-US',
      {
        year: 'numeric',
        month: 'long',
        day: 'numeric',
      }
    )
}

const storyEvents : StoryEvent[] = story.data.events
  .map(storyEvent => {
    const event = events.find(e => e.id === storyEvent.id)
    if (!event) {
      throw new Error(`Could not find event ${storyEvent.id} in story ${story.id}`)
    }
    const xPercent = event.x / columns
    let position
    if (xPercent < 0.25) {
      position = {
        origin: StoryEventPositionOrigin.left,
        offset: xPercent,
      }
    } else if (xPercent < 0.75) {
      position = {
        origin: StoryEventPositionOrigin.center,
        offset: xPercent,
      }
    } else {
      position = {
        origin: StoryEventPositionOrigin.right,
        offset: 1 - xPercent,
      }
    }
    return {
      date: formatDate(event.date),
      headline: event.headline,
      summary: event.summary,
      x: event.x,
      y: event.y,
      position,
      ...storyEvent,
    }
  })

const chartEventCoordsHighlighted = getFilteredEvents(events, story.data.filters)
  .map(({x, y}) => ({x, y}))

const chartEventCoords = data.filter(coords => {
  const isHighlighted = chartEventCoordsHighlighted
    .find(c => c.x == coords.x && c.y === coords.y)
  return !isHighlighted
})

const intro = await marked.parse(story.data.intro)
const conclusion = await marked.parse(story.data.conclusion)
---

<Layout
	title={[story.data.prefix, story.data.title].join(' ')}
	description={story.data.description}
	currentUrl="/"
	bgColor="black"
>
	<div class="
      h-screen
      h-svh
      pt-(--header-height)
      flex
      flex-col
      bg-black
      text-white
    "
  >
    <h1
      class="
        p-4
        bg-grey-dark
        sm:py-6
        xl:px-16
        xl:grid
        xl:grid-cols-12
        3xl:py-12
      "
    >
      <div
        class="
          flex
          flex-col
          xl:col-span-9
        "
      >
        <span
          class="
            sr-only
            text-sm
            font-medium
            uppercase
            xl:not-sr-only
            3xl:text-lg
            3xl:leading-3
          "
        >
          {story.data.prefix}
        </span>
        <span
          class="
            text-2xl
            leading-tight
            font-extrabold
            uppercase
            xl:text-3xl
            3xl:text-4xl
          "
        >
          {story.data.title}
        </span>
      </div>
    </h1>
    <StoryBlock
      client:load
      chartColumns={columns}
      chartEventCoords={chartEventCoords}
      chartEventCoordsHighlighted={chartEventCoordsHighlighted}
      chartRows={rows}
      ticks={ticks}
      intro={intro}
      conclusion={conclusion}
      events={storyEvents}
      actions={story.data.actions}
    />
	</div>
</Layout>